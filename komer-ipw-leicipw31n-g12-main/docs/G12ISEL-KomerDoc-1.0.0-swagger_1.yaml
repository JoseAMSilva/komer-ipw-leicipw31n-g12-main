openapi: 3.0.1
info:
  title: Komer API
  description: This is a simple Komer API
  contact:
    email: rodrigo.h.correia@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/G12ISEL/KomerDoc/1.0.0
  - description: Localhost server for testing API
    url: http://localhost:1212/api

tags:
- name: recipes
- name: users #TODO

paths:
  /users/{userName}:
    put:
      tags:
      - users
      summary: adds a user 
      description: Adds a user to the system
      operationId: addUser
      parameters:
      - name: userName
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: false
      responses:
        201:
          description: user created
          content:
            application/json:
              schema:
                required:
                - token
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        400:
          description: Invalid input, object invalid
          content: {}
      x-codegen-request-body-name: user
  /recipes:
    get:
      tags:
      - recipes
      summary: get recipes
      description: By passing in the appropriate options, you can search for available recipes
      operationId: getRecipes
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
          format: uuid
      - name: searchString
        in: query
        description: pass an optional search string for looking up recipes with that text
        schema:
          type: string
      - name: skip
        in: query
        description: number of records to skip for pagination
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: maximum number of records to return
        schema:
          maximum: 50
          minimum: 0
          type: integer
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipe'
        400:
          description: bad input parameter
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
    post:
      tags:
      - recipes
      summary: adds a recipe
      description: Adds a recipe to the system
      operationId: addRecipe
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: recipe to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipe'
        required: false
      responses:
        201:
          description: recipe created
          content: {}
        400:
          description: Invalid input, object invalid
          content: {}
      x-codegen-request-body-name: recipes
  /recipes/{recipeId}:
    get:
      tags:
      - recipes
      summary: Get a recipe given its id
      description: Get a recipe given its id
      operationId: getRecipeById
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
          format: uuid
      - name: recipeId
        in: path
        description: ID of recipe that to be fetched
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'
        400:
          description: Invalid ID supplied
          content: 
            application/json:
              schema: 
                type: string
                example: Invalid ID supplied
        404:
          description: recipe not found
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/InvalidRequest'
                example: recipe Not found
    put:
      tags:
      - recipes
      summary: updates a recipe
      description: Updates a recipe in the system
      operationId: updateRecipe
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true #TODO
        schema:
          type: string
          format: uuid
      - name: recipeId
        in: path
        description: ID of the recipe to be deleted
        required: true
        schema:
          type: integer
      requestBody:
        description: recipe to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipe'
        required: false
      responses:
        201:
          description: recipe updated
          content: {}
        404:
          description: recipe not found
          content: {}
    delete:
      tags:
      - recipes
      summary: Delete a recipe by ID
      description: Delete a recipe by ID
      operationId: deleteRecipe
      security:
        - bearerAuth: []
      parameters:
      - name: recipeId
        in: path
        description: ID of the recipe to be deleted
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: recipe not found
          content: {}
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
  schemas:
    recipe:
      required:
      - id
      - text
      - userId
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Strogonoff
        description:
          type: string
          example: Strogonoff recipe description
        userId:
          type: integer
    NewRecipe:
      required:
      - name
      - userId
      type: object
      properties:
        name:
          type: string
          example: Strogonoff
        description:
          type: string
          example: Strogonoff recipe description
        userId:
          type: integer
    NewUser:
      required:
      - userName
      type: object
      properties:
        userName:
          type: string
          example: Falcao
    InvalidRequest:
      type: object
      properties:
        cause:
          type: string
          example: "Missing required parameter"